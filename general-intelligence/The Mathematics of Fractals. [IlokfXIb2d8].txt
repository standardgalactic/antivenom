Hi, my name is Michael Ostroff, and I'm a Ph.D. physics student at FAU.
One of my hobbies is playing around with fractals, essentially,
and a couple of years ago I discovered a new fractal phenomenon,
which I refer to as fractal flow.
In order to describe it, I need to first describe what monobot sets are
and what Julia sets are.
So, if you take some random complex function, like some polynomial thing,
and you apply it over and over and over again,
then for different starting values...
Oh, and also, let's say this function also has a set of parameters called C.
If you keep applying this over and over again,
eventually those points are either going to diverge to complex infinity
or they're going to stay constrained.
And you can give this a sort of iteration count, essentially.
And you can see how this iteration count changes for the entire domain
as you vary those parameters C.
What I'm describing is essentially how the monobot set and Julia sets work.
So, the Julia set is typically...
It's essentially a plot of the iteration count of when this escapes to infinity, essentially,
or passes some barrier.
And you'll notice that this Julia set, it's either going to be this dust
or it's going to be connected.
Well, there's an in-between state, but I digress.
And if it's disconnected, like a dust, then that means it values its parameters C.
They're outside of what's known as the monobot set.
But if it's connected, it's inside the monobot set.
And the closer it is to the edge of the monobot set, the more intricate the structure of the corresponding Julia set is.
So, if you shift around of parameter C just a little bit,
you'll notice that the iteration counts for the Julia set, they actually shift around ever so slightly.
I wanted to go and quantify this movement, this flow of the fractal,
and I created a mathematical formula for it.
And it turns out that this flow, this fractal flow, is actually a complex field, essentially.
It's a complex monomorphic function, composed of essentially infinite poles and zeros of the complex function.
And because it is a complex function, and a one-dimensional complex function,
we can actually plot it on the complex plane.
And if you were to do so, you could have a very beautiful and colorful image,
and it just looks amazing in my opinion.
But these colors, the hue essentially tells you the direction you'd be moving in the complex plane,
and the whiteness tells you the intensity of that movement.
Where white is essentially complex infinity, and if it's highly saturated,
then that means it's not moving much whatsoever.
Red means it's moving in the positive real direction.
Lime means it's moving in the positive imaginary direction.
Sand means it's moving in the negative real direction.
And violet means it's moving in the negative imaginary direction.
I've uploaded a video of fractal flow on my YouTube channel, Perpetual Science.
And you can see how, like, if the value of C moves around the Mandelprot set,
the Julia set shifts around, and how this, like, movement corresponds to the fractal flow.
So, I'm not entirely sure how much of, like, usage this has.
Oh wait, I should explain a bit more.
What I'm technically doing with the fractal flow is, I'm calculating, like, essentially, what Z zero,
your, like, the initial, like, starting point, how much it needs to change as C changes,
in order for the infinite iteration of the fractal, or of the, like, function, like, Z squared plus C, like, or whatever it is.
Because you can do different stuff, as I've shown in my blog post.
Basically, you're calculating how much Z zero needs to be changing, like, what rate of change needs to be,
in order for Z infinity to stay constant.
So, with, like, the fractal flow, if you're, like, the normal, like, the cases I've, like, presented so far, in my blog, and on my YouTube channel,
they basically have only one parameter, and they're one dimensional, so, like, they're outputting only one number.
But if you, you can actually give them way more than one parameter, and you can also make them higher dimensional.
Like, so you can have, like, instead of having, like, a normal Mondo set, you can have, like, a Mondo bulb thing,
which might be, like, three dimensional, or 80 dimensional, or something.
And these, like, this, these, like, functions that you're applying over and over again, these are kind of similar to recursive neural networks, in a sense.
Because, with those, you're basically taking the output and applying, like, the function over and over and over again, like the neural network.
Our brains are actually recurrent neural networks, and they operate on what's known as the edge of chaos, essentially.
Computations at the edge of chaos are, like, a lot more intricate, whereas computations away from, like, the edge of chaos are a lot more simple, essentially.
And it's thought that if you had, like, made a neural network operate at the edge of chaos, then it would be, like, more efficient and powerful than one operating far away from it.
So, one thing you can do is, like, the fractal flow is, let's say you have, like, a point on the fractal, and you want, like, that, like, part of the fractal flow to, you want the fractal to flow at a different, at that point in a certain direction.
You can actually compute what the, like, what c zero, or, I mean, what c dot needs to be in order for the fractal flow to have that value at that given point.
However, if you have a lot of different parameters and higher dimensions, you could actually specify what you want the fractal flow to be at several different points.
Well, at least in theory, um, I haven't fully tested this out, but you could, like, you should, I believe, be able to specify, like, where you want different parts of the fractal to move, such as, maybe, like, parts which are near the Julia set.
And you could maybe cause, like, like, have those evolve to move towards certain points.
And this should, I think, allow you to essentially sculpt the Julia set into, like, whatever shapes that you want.
And if you, the calculations your neural network is going to be performing are near those, like, locations, then you're essentially having those computations happening, like, at the, like, edge of chaos.
So, this fractal flow might actually be useful for, um, training, like, neural networks in a completely new way, um, which, um, causes them to operate at the edge of chaos, which could make them a lot more powerful.
I don't know if this is actually the case, though.
I have not done this yet, so, um, like, take it with, like, a couple of grams of salt, I suppose.
I'm going to be researching, like, the complex systems behavior of, like, fractal flow and, um, fractals in general.
Um, so, I'll probably find more stuff.
So, again, if you want to know more about, like, fractal flow, um, you can check out my blog post on fractal flow.
If you want to look at how fractals go and, if you want to see an example of fractal flow is your eyes, watch the video I uploaded on my Perpetual Science YouTube channel.
Um, and that is essentially it.
Um, next time I'm on, I believe I'll be talking about wormholes a bit more.
Uh, have a good day.
Thank you, and goodbye.
Bye.
Bye.
