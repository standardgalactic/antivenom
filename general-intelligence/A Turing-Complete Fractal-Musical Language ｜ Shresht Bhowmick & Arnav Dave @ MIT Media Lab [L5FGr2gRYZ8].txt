Hi everyone, I'm Srisht, and me and my teammate Arna, we built Shuffler.
So, it stands for Shoegaze Hierarchical Factual Language Architecture.
I just thought the acronym was funny, so that's why we chose it.
Essentially, our idea here was to create a Turing-complete language built out of just music.
We started with Shoegaze because it has a lot of complexity to the sound, so we tried to identify characteristics of sound that we could create into a language which would have indefinite amounts of computation run using just sound and its characteristics over time.
So, we were thinking things like constant parameters in music allow for cross-language understanding, so we should keep that constant as well in our language.
It also happens to be intuitively comprehensible.
You can have music that goes, that is instrumental, and people who don't speak the same language can understand it intuitively.
That also happens to be one of the innate features of human languages.
It's been studied extensively by linguistics, by people in the field of linguistics, and the reason that we think that it's an innate feature arises out of the whole concept of human communication being on an entirely different level of complexity than most other species.
And our last idea for our design was that we were going to create finite building blocks, and because we have sound with such complex parameters and complexity, we need to have a way to make those building blocks create infinite levels of meaning.
So, the answer we came to with those components was to render the results of this computation as fractals, specifically the Julia set.
Because the Julia set, if you're not familiar, you can create fractals out of the Julia set, which are extremely beautiful, of course, but they also happen to take in an abnormal number of parameters as input.
So, you can encode a lot of the characteristics of the Julia set without having to sacrifice on the innate meaning that you're trying to create.
So, the other advantage of using a fractal is that there's infinitely complex self-similarity.
So, as you zoom in, it keeps expanding similar to how it was before.
Now, we've worked with the different parameters to make it look how the sound sounds, which I found really interesting.
There's a whole field of psycholinguistics dedicated just to how you perceive sound to be shaped.
Anyone knows, I'm pretty sure lots of people know this, but just for reference, the Boba and Kiki experiment, it's the most simple example of it.
But if you have a round shape and, let's say, a triangle, you're very, very likely to name the round shape Boba and the triangle, which is more pointy Kiki, because of how the sounds are shaped in your mouth.
That's sort of the direction we were coming from.
Our language also happens to be Turing complete.
So, yes, we started with shoegaze samples because I like shoegaze.
There's no other reason for it.
But you can run it on essentially any sound which can be recorded in the .wav format.
And again, it's sound.
We can run this on other formats too, just for the sake of a demo.
We've restricted to one file format so that we can really map it out well.
So, yeah, I'm going to show you the demo.
So, the cool thing about this is if the Wi-Fi is willing, I can run this on any song you guys want.
So, I'm going to run it on first a shoegaze track.
And if anyone has suggestions afterwards, I can run it on that too.
What platform is this searching for the song?
So, this is YouTube, literally.
This is the album cover I got from the iTunes API.
What is shoegaze?
Shoegaze?
.
Have you heard a copyright by chance?
We don't talk about that.
We don't talk about that.
Oh, no, we can't use that.
Uh-oh.
No, it's straightforward.
It's okay.
It's a post copyright.
It's straightforward.
It's straightforward.
It's straightforward.
Anyways, so that was the fractal language, Shuffler.
And if you notice, the outputs which you get are infinitely complex.
Now, when I say that, I really do mean infinitely complex.
You can keep zooming in forever and ever and ever.
It is a fractal, after all.
And what that means is that this is a bonafide Turing machine.
You can compute any operation that you would run on a normal computer.
When given enough memory and computational power, this can run that operation in the same way.
And you will have to encode it in sound files.
But that's just a gimmick that I thought was pretty cool because you can run any music on this.
I think I was very, very invested in the idea of unconventional computing.
And I think, like, exploring music and fractals like this was something I really wanted to do.
So I'm glad I built this.
Hopefully, I got the idea of a Turing complete language through to you.
So, yeah, that's it.
All right, judge questions first.
So, what is, sort of, have you tried to find the primitive operations that are kind of, sort of distinct in this language?
Like in terms of, sort of, any weird quirks that you've explored or thought about?
What's the difference here?
So, there's one specific thing I want to mention.
This supports two operations which generally wouldn't be natively supported without, you know, simulation on most other systems.
And those are complex numbers and division by zero.
And it's, I just found that really funny.
The way we're doing division by zero in particular is, it's pretty arbitrary.
But the fact that it can do it in an asymptotic manner because we have complex numbers is interesting.
So we actually have some divisions by zero in the Julia set, which you just saw.
So whenever there's an empty chunk of sound, it shows you that division by zero in the complex plane.
But it does that by adding a very tiny complex epsilon number.
And that's what we did.
And the other one, complex operations, that's an innate property of the Julia set.
That's how you calculate the Julia set in general.
So whenever you're having operations running in the Julia set, you get your output, so to speak, as a value of the Julia set.
So that's what we're computing.
So I thought that was pretty cool.
Like native complex operations.
Judge question.
That's a call.
Anyone?
Any judge?
So the way that it looks to me is a complex version of those waveforms when someone's speaking
and then you see those, the EQs, the bars go up and down.
Is this supposed to be something that people are using to communicate to one another?
Or so how?
So I tried this out earlier, but essentially I was going off a little bit from Annie's idea about languages as smells.
And essentially you can look at one of the frames, if you freeze the frame.
You look at it, you look at the edge types, the colors, and you can understand what kind of sound was used to create this.
So you can use it to communicate sound.
Now there's a whole other problem, which is it would take a lot more for the human brain to understand how that sound has been turned into the Julia set.
But that's mostly because we're not made to run something like 600 operations per second.
It's a problem with us, not with this.
But you can understand how the sound sounds like from just an image.
So if I give you an image and you start understanding how the language works, you've actually got a language which is working in sound and visuals.
So yeah, you can use it to communicate sound.
Last question?
I have a quick one.
Can you show an example of it doing a program if you have one ready that does an actual computation?
If not, can you please include it in your final speaker?
Yeah, no, I don't have it right now.
But the idea here is any computation can be done on any input where the input is a sound file.
So what I can do is if you have like a song or a sound file you want me to play it, I can do that.
But no, I don't have an option.
If you're able to, for your final submission, include that.
Yeah.
Okay.
All right, let's give our speaker a round.
Awesome.
Thank you.
Thank you.
Thank you.
Who's next?
Mr. Cameron, I know.
Thank you.
