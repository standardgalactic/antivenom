So this is this branch of things called,
used to be called neuro computing.
And I think there's an interesting overlap here
in something called natural computing.
This is one of the things that we study here in the sandbox.
And there's sort of a bunch of things that come together.
And the idea is that they need to look at nature
to figure out how computation works.
What's happening in the blade of grass?
What's happening with seagulls
as they search the beach for food?
Who's ever made the mistake
of giving a seagull a french fry?
They all come out of nowhere.
They have the entire ocean to look for food.
How do they know to show off at your picnic?
Same with ants in Florida and so on.
And so this kind of computing that nature does all the time
is things that we need inspiration from.
A few decades ago, people said,
well, we probably don't need that.
But it was so successful to look at the brain
and to look at these neural networks
that now the idea is that we need to go and look at,
well, how do friend groups form with social computing?
How does physics actually compute?
If we go like this, that's computing the sound
that it just made.
It's not a very interesting computation,
but we can think of it as there was an input
and there was an output in terms of the sound.
Developmental computing.
How do we actually form the structures that we have?
How do you take an acorn and get an oak tree out of it?
How do you take a human cell and get a full physiology?
On the other scale with evolution,
and one that I think is particularly interesting,
is immunocomputing, looking at our immune system.
Your body remembers that you had chickenpox.
And in there, if you ever encounter that again,
your body remembers the solution,
and it can pull that out of its memory
and use that to help fix it.
Kind of like the brain, but it has very different properties.
This idea of multi-party computation.
It's an idea of how do you split up a problem
into a bunch of little pieces,
such that you can have people participate on the problem,
but not actually know what they're working on.
This was actually done in practice,
again, during World War II,
when people working on the atomic bomb project,
largely had those silos.
They were able to split that problem off
into so many little pieces,
that most of the people helping on,
what's now called the Manhattan Project,
not know what they were helping with.
They split the problem into little, little pieces,
and they would say,
all right, here's a dial, and here's a little wheel,
and when it goes this way, turn it that way,
and when it goes that way, turn it this way.
And they'd say, okay, glad to be helping.
They had no idea that they were helping diffuse gradient.
And so the idea is you can take a big,
complicated problem and split it up into little pieces,
such that the actual problem itself stays a secret,
but you can still get the answer.
