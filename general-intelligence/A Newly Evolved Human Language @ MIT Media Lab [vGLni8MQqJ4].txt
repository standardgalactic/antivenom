one. Hello everyone my name is Wenite and I'm presenting Futurelang. So basically the overall
vision and you can argue if this is even theoretically possible is a universal language
for human AI communication that is natural enough for humans to be able to easily speak and write
but it's formal enough to be verified and it preserves meaning across translation from natural
language to the future language. So for historical context there's been a long-standing idea in math
and philosophy to create what Leibniz called the characteristic universalis which is basically a
theoretical language that's capable of expressing any mathematical or philosophical proof.
And this dream of mechanical reasoning has been one of the foundational drivers of computer
science and formal automata theory. And there's also been multiple attempts to create a universal
logical language that kind of bridges theories of mathematical logic. Some of the attempts that I
draw inspiration from include Lodgban. Lodgban is a constructed language created for actual speech
language that is made to be logically precise. So every statement in Lodgban can be logically evaluated
but they engineered it in a way such that many of the statements that are naturally expressed in
natural language are able to be expressed in Lodgban. One of the difficulties in learning Lodgban
is that it has a completely new vocabulary. Mathematically there is COC, LEAN, and HAGNA which are programming languages
for formal verification. And we also have LLMs which are taking like an NLP approach to translating between
natural language and code. So the idea that I have for future length is to keep natural vocabulary
and a truth of valuable structure. But also allow for the formal verification of every statement made
in the language and clearly denote explicit logical relationships. So this is like an example of how
is brainstorming a transformation that can be done with an ambiguous statement such as the the soup is hot.
Like what does that really mean when you say something like that? There's many ways you could try to formalize this
but some of the difficulties you run into is adding unnecessary specificity because like the concept of
something being hot is not objective but you can describe it in terms of temperature. However in like how
we speak naturally we do make claims that aren't that specific. But the goal like for this language
should be that the claim is logically valuable so we transform it into a form where you can say that
the claim is true or false. The specific subset that I started with to kind of build this proof of
concept is mathematical proof notation. So just taking a standard example from introductory analysis to prove
that the square root of the square root of two is irrational.
Yeah, I'm kind of going to skip slides. But you can see in like how in existing formal theorem provers like
cock in lean it's it requires like advanced studying to be able to understand the syntax. And the goal with
future length is to be able to make it in a way where that anyone can easily write these verifiable proofs
without necessarily having to study difficult syntax. So the grand vision beyond proofs is to be able to
and this is an idea that I had based off watching some of the talks this past weekend of the cognitive map.
If you have this kind of language you can create a wikipedia style knowledge base and basically formally
verify logical connections between data that you have stored within the cognitive map.
The way that it was architected technically for this proof of concept does use an LLM transformer.
So it is a prompt that I am passing to CLOT to be able to transform statements from natural language to
the current implementation of future length syntax which is still under development. And I created a formal
parser, a proof verifier, and plan to integrate a knowledge graph eventually.
And here's the demo. I think I shared the side deck because on the paper I have some of the code
that shows the formalization. But yeah so as an example statement if we wanted to express like every prime ideal of a boolean algebra is maximum
that's how the future length translator would transform it to a future length.
And then yeah the implementation details for those who are like interested in how the
language itself is actually implemented. Basically I used TypeScript to start writing the parser and compiler.
Anything else or that's good? Go ahead. Yeah. All right. Awesome.
Josh questions. Let's go. Is the goal to look at someone's proof like let's say you write up a paper and
you have a proof of some theorem that you've just created to then take that put it into future length
just with an LLM and then doubly verify that it's correct? I guess that is one use case but the main goal is
just well it's like an attempt to both make human language more precise and machine language more readable to humans.
I will say I'll go ahead. Now I was going to ask one thing about sort of how you have you how much
have you really looked into sort of the the deep areas of these non-classical languages and the way
that they they're learned and that they're learned in very fundamentally different ways.
What kinds of non-classical languages? Well remember the olfactory language thing where
there's sort of an entirely different let's say observer paradigm of how you're trying to even
understand it and it's very it's very hard there's such a distance between your original reference and
you know the original semantic value to the new thing like what types of logic or could we even have
sort of a middle language that's used to transfer between those things so I'm just curious if you've
thought about that. I had not thought about things from that angle I don't think I understand enough
about okay yeah cool awesome
