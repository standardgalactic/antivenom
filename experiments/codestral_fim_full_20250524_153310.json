[
  {
    "name": "hanoi_recursive",
    "description": "Classic Tower of Hanoi recursion",
    "full_code": "def solve_hanoi(n: int):\nif n == 1:\n        return 1\n    else:\n        return 2 * solve_hanoi(n - 1) + 1\nn = int(input('How many disks? '))\nprint(solve_hanoi(n))"
  },
  {
    "name": "fibonacci_recursive",
    "description": "Recursive Fibonacci",
    "full_code": "def fib(n: int):\nif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\nprint(fib(10))"
  },
  {
    "name": "factorial_recursive",
    "description": "Recursive factorial",
    "full_code": "def factorial(n: int):\nif n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\n# Example usage\nprint(factorial(5))"
  },
  {
    "name": "binary_search",
    "description": "Binary search in sorted list",
    "full_code": "def binary_search(arr, target):\nleft, right = 0, len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n# Example usage\nprint(binary_search([1, 3, 5, 7], 5))"
  },
  {
    "name": "is_prime",
    "description": "Primality check",
    "full_code": "def is_prime(n):\nif n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n# Example usage\nprint(is_prime(17))"
  }
]